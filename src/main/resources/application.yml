server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: ${GATEWAY_NAME:orion-gateway}

  cloud:
    # Disable Consul Discovery
    consul:
      enabled: false
      discovery:
        enabled: false

    # Load balancer configuration for service discovery
    loadbalancer:
      # Load balancing algorithm: round_robin, random, weighted_random
      configurations:
        default:
          health-check:
            enabled: true
            interval: 30s

    gateway:
      # Gateway route configuration with load balancing
      routes:
        # User management routes with load balancing
        - id: user-service-lb
          uri: ${ORION_USER_URL:http://orion-user:8092} # Uses environment variable
          predicates:
            - Path=/api/users/**
          filters:
            - RewritePath=/api/users(?<segment>.*), /service/user$\{segment}
            - name: CircuitBreaker
              args:
                name: user-service-cb
                fallbackUri: forward:/fallback/user
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY,GATEWAY_TIMEOUT
                backoff:
                  firstBackoff: 100ms
                  maxBackoff: 500ms

        - id: role-service-lb
          uri: ${ORION_USER_URL:http://orion-user:8092} # Roles go to the same user service
          predicates:
            - Path=/api/roles/**
          filters:
            - RewritePath=/api/roles(?<segment>.*), /service/role$\{segment}
            - name: CircuitBreaker
              args:
                name: role-service-cb
                fallbackUri: forward:/fallback/user

        # Authentication routes with load balancing
        - id: auth-service-lb
          uri: ${ORION_AUTH_URL:http://orion-auth:8091}
          predicates:
            - Path=/api/auth/**
          filters:
            - RewritePath=/api/auth(?<segment>.*), /authenticate$\{segment}
            - name: CircuitBreaker
              args:
                name: auth-service-cb
                fallbackUri: forward:/fallback/auth
            - name: Retry
              args:
                retries: 2
                statuses: BAD_GATEWAY,GATEWAY_TIMEOUT

        # Program management routes with load balancing
        - id: program-service-lb
          uri: ${ORION_PROGRAM_URL:http://orion-program:8093}
          predicates:
            - Path=/api/programs/**
          filters:
            - RewritePath=/api/programs(?<segment>.*), /service/program$\{segment}
            - name: CircuitBreaker
              args:
                 name: program-service-cb
                 fallbackUri: forward:/fallback/program

        # Document management routes with load balancing
        - id: document-service-lb
          uri: ${ORION_DOCUMENT_URL:http://orion-document:8094}
          predicates:
            - Path=/api/documents/**
          filters:
            - RewritePath=/api/documents(?<segment>.*), /service/document$\{segment}
            - name: CircuitBreaker
              args:
                name: document-service-cb
                fallbackUri: forward:/fallback/document

        # Drive service routes with load balancing
        - id: drive-service-lb
          uri: ${ORION_DRIVE_URL:http://orion-drive:8095}
          predicates:
            - Path=/api/drive/**
          filters:
            - RewritePath=/api/drive(?<segment>.*), /service/drive$\{segment}
            - name: CircuitBreaker
              args:
                name: drive-service-cb
                fallbackUri: forward:/fallback/drive

        # Health check route (without load balancing)
        - id: health-check
          uri: http://localhost:8080
          predicates:
            - Path=/health
          filters:
            - SetPath=/actuator/health

      # CORS Configuration
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origin-patterns:
              - "http://localhost:*"
              - "http://127.0.0.1:*"
              - "https://*.vercel.app"
              - "https://*.netlify.app"
            allowed-methods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
              - PATCH
            allowed-headers: "*"
            allow-credentials: true
            max-age: 3600

      # Default filters applied to all routes
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddResponseHeader=X-Gateway-Service, ${GATEWAY_NAME:orion-gateway}
        - AddResponseHeader=X-Gateway-Version, 1.0.0
        - AddResponseHeader=X-Load-Balancer, enabled

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
    instances:
      user-service-cb:
        base-config: default
      auth-service-cb:
        base-config: default
      program-service-cb:
        base-config: default
      document-service-cb:
        base-config: default
      drive-service-cb:
        base-config: default

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,gateway,metrics,env,circuitbreakers
      base-path: /actuator
  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true
  # Prometheus metrics configuration
  prometheus:
    metrics:
      export:
        enabled: true

# Application Info
info:
  app:
    name: ${GATEWAY_NAME:Orion Gateway}
    description: Load Balanced Gateway for Orion Microservices
    version: 1.0.0
    features:
      - Load Balancing
      - Circuit Breaker
      - Retry Logic
      - Health Checks

# Logging Configuration
logging:
  level:
    org.springframework.cloud.gateway: INFO
    org.springframework.cloud.loadbalancer: DEBUG
    org.springframework.web.cors: DEBUG
    com.unibague.gradework: DEBUG
    org.springframework.cloud.circuitbreaker: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId}] %logger{36} - %msg%n"