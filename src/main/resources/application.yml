# ===========================================
# ORION GATEWAY SERVICE - application.yml (dev/docker)
# ===========================================

server:
  port: ${GATEWAY_PORT:8080}

spring:
  application:
    name: ${GATEWAY_NAME:orion-gateway}

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:docker}

  cloud:
    consul:
      enabled: false
      discovery:
        enabled: false

    loadbalancer:
      retry:
        enabled: true

    gateway:
      # ---------------------------
      # RUTAS
      # ---------------------------
      routes:

        # ==========================
        # OAuth2 (redir & callback) -> va directo al Auth (sin JWT)
        # ==========================
        - id: oauth2-authorization
          uri: ${ORION_AUTH_URL:http://orion-auth:8091}
          predicates:
            - Path=/oauth2/authorization/**
          filters:
            - RewritePath=/oauth2/authorization(?<segment>.*), /oauth2/authorization$\{segment}
            - AddRequestHeader=X-Skip-Auth, true
            - AddRequestHeader=X-Gateway-Validated, true

        - id: oauth2-callback
          uri: ${ORION_AUTH_URL:http://orion-auth:8091}
          predicates:
            - Path=/login/oauth2/code/**
          filters:
            - RewritePath=/login/oauth2/code(?<segment>.*), /login/oauth2/code$\{segment}
            - AddRequestHeader=X-Skip-Auth, true
            - AddRequestHeader=X-Gateway-Validated, true

        # ==========================
        # Auth Service (algunas rutas sin JWT para bootstrap del login)
        # ==========================
        - id: auth-login
          uri: ${ORION_AUTH_URL:http://orion-auth:8091}
          predicates:
            - Path=/api/auth/login
          filters:
            - RewritePath=/api/auth/login, /auth/login
            - AddRequestHeader=X-Skip-Auth, true
            - AddRequestHeader=X-Gateway-Validated, true

        - id: auth-validate
          uri: ${ORION_AUTH_URL:http://orion-auth:8091}
          predicates:
            - Path=/api/auth/validate
          filters:
            - RewritePath=/api/auth/validate, /auth/validate
            - AddRequestHeader=X-Skip-Auth, true
            - AddRequestHeader=X-Gateway-Validated, true

        - id: auth-jwks
          uri: ${ORION_AUTH_URL:http://orion-auth:8091}
          predicates:
            - Path=/api/auth/jwks
          filters:
            - RewritePath=/api/auth/jwks, /auth/jwks
            - AddRequestHeader=X-Skip-Auth, true
            - AddRequestHeader=X-Gateway-Validated, true

        - id: auth-me
          uri: ${ORION_AUTH_URL:http://orion-auth:8091}
          predicates:
            - Path=/api/auth/me
          filters:
            - RewritePath=/api/auth/me, /auth/me
            - AddRequestHeader=X-Skip-Auth, true
            - AddRequestHeader=X-Gateway-Validated, true

        # Otras rutas de auth con CB (si las usas)
        - id: auth-service-general
          uri: ${ORION_AUTH_URL:http://orion-auth:8091}
          predicates:
            - Path=/api/auth/**
          filters:
            - RewritePath=/api/auth(?<segment>.*), /auth$\{segment}
            - name: CircuitBreaker
              args:
                name: auth-service-cb
                fallbackUri: forward:/fallback/auth

        # ==========================
        # Rutas internas SIN autenticación (solo si viene desde otro microservicio)
        # Reglas: require Header X-Service-Request: true
        #         y agregamos X-Internal-Request para trazabilidad
        # ==========================

        # Buscar usuario por email (interno)
        - id: internal-user-auth-email
          uri: ${ORION_USER_URL:http://orion-user:8092}
          predicates:
            - Path=/api/users/auth/email/**
            - Header=X-Service-Request, true
          filters:
            - RewritePath=/api/users/auth/email(?<segment>.*), /service/user/auth/email$\{segment}
            - AddRequestHeader=X-Skip-Auth, true
            - AddRequestHeader=X-Gateway-Validated, true
            - AddRequestHeader=X-Internal-Request, true

        # Program by name (interno)
        - id: internal-program-by-name
          uri: ${ORION_PROGRAM_URL:http://orion-program:8093}
          predicates:
            - Path=/api/programs/name/**
            - Header=X-Service-Request, true
          filters:
            - RewritePath=/api/programs/name(?<segment>.*), /service/program/name$\{segment}
            - AddRequestHeader=X-Skip-Auth, true
            - AddRequestHeader=X-Gateway-Validated, true
            - AddRequestHeader=X-Internal-Request, true

        # Crear programa (interno)
        - id: internal-program-create
          uri: ${ORION_PROGRAM_URL:http://orion-program:8093}
          predicates:
            - Path=/api/programs
            - Method=POST
            - Header=X-Service-Request, true
          filters:
            - RewritePath=/api/programs, /service/program
            - AddRequestHeader=X-Skip-Auth, true
            - AddRequestHeader=X-Gateway-Validated, true
            - AddRequestHeader=X-Internal-Request, true

        # ==========================
        # User / Role públicos (pasan por Gateway con CB)
        # ==========================
        - id: user-service-lb
          uri: ${ORION_USER_URL:http://orion-user:8092}
          predicates:
            - Path=/api/users/**
          filters:
            - RewritePath=/api/users(?<segment>.*), /service/user$\{segment}
            - AddRequestHeader=X-Gateway-Validated, true
            - name: CircuitBreaker
              args:
                name: user-service-cb
                fallbackUri: forward:/fallback/user

        - id: role-service-lb
          uri: ${ORION_USER_URL:http://orion-user:8092}
          predicates:
            - Path=/api/roles/**
          filters:
            - RewritePath=/api/roles(?<segment>.*), /service/role$\{segment}
            - AddRequestHeader=X-Gateway-Validated, true
            - name: CircuitBreaker
              args:
                name: role-service-cb
                fallbackUri: forward:/fallback/user

        # ==========================
        # Program públicos
        # ==========================
        - id: program-service-lb
          uri: ${ORION_PROGRAM_URL:http://orion-program:8093}
          predicates:
            - Path=/api/programs/**
          filters:
            - RewritePath=/api/programs(?<segment>.*), /service/program$\{segment}
            - AddRequestHeader=X-Gateway-Validated, true
            - name: CircuitBreaker
              args:
                name: program-service-cb
                fallbackUri: forward:/fallback/program

        # ==========================
        # Health
        # ==========================
        - id: health-check
          uri: http://localhost:${GATEWAY_PORT:8080}
          predicates:
            - Path=/health
          filters:
            - SetPath=/actuator/health

        - id: actuator-health
          uri: http://localhost:${GATEWAY_PORT:8080}
          predicates:
            - Path=/actuator/health
          filters:
            - AddRequestHeader=X-Skip-Auth, true

      # ---------------------------
      # CORS (desde tu .env.dev)
      # ---------------------------
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origin-patterns: ${CORS_ALLOWED_ORIGINS_DEV:http://localhost:*}
            allowed-methods: [GET, POST, PUT, DELETE, OPTIONS, PATCH]
            allowed-headers: "*"
            allow-credentials: true
            max-age: 3600

      # ---------------------------
      # Filtros por defecto
      # ---------------------------
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddResponseHeader=X-Gateway-Service, ${GATEWAY_NAME:orion-gateway}

# ==========================
# Circuit Breakers
# ==========================
resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
    instances:
      user-service-cb:
        base-config: default
      auth-service-cb:
        base-config: default
      program-service-cb:
        base-config: default

# ==========================
# Management
# ==========================
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,gateway,metrics,circuitbreakers
  endpoint:
    health:
      show-details: always

# ==========================
# Comunicación interna
# ==========================
gateway:
  service:
    token: ${GATEWAY_SERVICE_TOKEN:dev-token}
  internal:
    services: [orion-auth, orion-user, orion-program]

auth:
  service:
    validation:
      url: ${ORION_AUTH_URL:http://orion-auth:8091}/auth/validate

# ==========================
# Logging
# ==========================
logging:
  level:
    root: ${LOGGING_LEVEL:INFO}
    org.springframework.cloud.gateway: INFO
    org.springframework.cloud.loadbalancer: DEBUG
    com.unibague.gradework: ${LOG_LEVEL_GATEWAY:DEBUG}
